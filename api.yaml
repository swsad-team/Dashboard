swagger: '2.0'
info:
  version: 0.5.0
  title: Swagger Earnmoney
host: localhost:3000
basePath: '/'
tags:
  - name: user
    description: Operations about user
  - name: task
    description: Operations about task
  - name: answer
    description: Operations about answer
schemes:
  - http
  - https

paths:
  /users:
    post:
      tags:
        - user
      summary: Sign up a user
      description: ''
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              phone:
                type: string
              name:
                type: string
              password:
                type: string
              isOrganization:
                type: boolean
              realname:
                type: string
              birthYear:
                type: number
              gender:
                type: string
                enum:
                  - male
                  - female
                  - other
              studentID:
                type: string
              address:
                type: string
      responses:
        200:
          description: OK
        400:
          description: email/phone exists, return error message
          schema:
            type: string
    get:
      tags:
        - user
      summary: Get many users
      description: Get user list by uid array
      parameters:
        - name: body
          in: body
          description: The uid[]
          required: true
          type: array
          items:
            type: string
      responses:
        200:
          description: return a list of user info
          schema:
            type: array
            items:
              # $ref: "#/definitions/User"
              type: object
              properties:
                uid:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                name:
                  type: string
                isOrganization:
                  type: boolean
                gender:
                  type: string
                  enum:
                    - male
                    - female
                    - other
                studentID:
                  type: string
        400:
          description: uid array empty
  /users/login:
    get:
      tags:
        - user
      summary: User login
      description: ''
      parameters:
        - name: body
          in: body
          description: The phone/email & password for login
          required: true
          schema:
            type: object
            properties:
              account:
                type: string
              password:
                type: string
      responses:
        200:
          description: successfully login, return a token
          schema:
            type: string
        400:
          description: Password doesnot match account
        404:
          description: Not found account
  /users/{uid}:
    get:
      tags:
        - user
      summary: Get a user
      description: ''
      parameters:
        - name: uid
          in: path
          description: The uid of the user
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"
        404:
          description: Not found user 
    delete:
      tags:
        - user
      summary: Delete user
      description: ''
      parameters:
        - name: uid
          in: path
          description: The uid of the user
          required: true
          type: string
      responses:
        200:
          description: Successfully delete the user
        # 400:
        #   description: Invalid
        404:
          description: Not found user
  /tasks:
    get:
      tags:
        - task
      summary: Get tasks list and total page
      description: ''
      parameters:
        - name: page
          in: query
          description: The id of page, start from 1
          required: true
          type: integer
        - name: per_page
          in: query
          description: num of tasks per page
          required: true
          type: integer
        - name: filter
          in: query
          description: "enum ['personal', 'organizational', 'participable'] (multiple)"
          type: string
        - name: sort
          in: query
          description: "enum ['time', 'coin'] (single)"
          type: string
      responses:
        200:
          description: OK, return {per_page} tasks
          schema:
            $ref: "#/definitions/TaskInfoList"
        404:
          description: Not found (page == 0 || page > total_page || invalid per_page)
    post:
      tags:
        - task
      summary: Create a task
      description: ''
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              tid:
                type: number
              publisherId:
                type: number
              title:
                type: string
              description:
                type: string
              isQuestion:
                type: boolean
              startTime:
                type: string
                format: date-time
              endTime:
                type: string
                format: date-time
              reward:
                type: number
              numOfPeople:
                type: number
              question:
                type: array
                items:
                  type: object
                  properties:
                    isRequired:
                      type: boolean
                    questionType:
                      type: string
                      enum:
                        - fill
                        - single
                        - multiple
                    questionTitle:
                      type: string
                    option:
                      type: array
                      items:
                        type: string
      responses:
        200:
          description: Create task OK
        400:
          description: Not enough coin
  /tasks/{tid}:
    get:
      tags:
        - task
      summary: Get a task by tid
      description: ''
      parameters:
        - name: tid
          in: path
          description: The tid of task
          required: true
          type: integer
      responses:
        200:
          description: OK, return all info
          schema:
            $ref: "#/definitions/Task"
        404:
          description: Not found task
    delete:
      tags:
        - task
      summary: Delete task
      description: Delete task & answerList
      parameters:
        - name: tid
          in: path
          description: The tid of the task
          required: true
          type: string
      responses:
        200:
          description: Successfully delete the task
        # 400:
        #   description: Invalid
        404:
          description: Not found task
    patch:
      tags:
        - task
      summary: Update a task
      description: Mainly used to complete a task
      parameters:
        - name: body
          in: body
          description: The info to update (optional)
          required: true
          schema:
            $ref: "#/definitions/Task"
      responses:
        200:
          description: Successfully update
        404:
          description: Not found task
  /tasks/{tid}/answer:
    post:
      tags:
        - answer
      summary: Store an answer
      description: Store answer of a task(questionnaire)
      parameters:
        - name: body
          in: body
          description: use tid to find answerList, to insert answer
          required: true
          schema:
            $ref: "#/definitions/Answer"
      responses:
        200:
          description: OK
        404:
          description: Not found task(questionnaire)
  /tasks/{tid}/answers:
    get:
      tags:
        - answer
      summary: Get all answers
      description: Get answer list of a task(questionnaire)
      parameters:
        - name: tid
          in: path
          description: The tid of task
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Answer"
        404:
          description: Not found (page)
  #
#end paths

# models
definitions:
  User:
    type: object
    properties:
      uid:
        type: number
      email:
        type: string
      phone:
        type: string
      name:
        type: string
      password:
        type: string
      isOrganization:
        type: boolean
      coin:
        type: number
      realname:
        type: string
      birthYear:
        type: number
      gender:
        type: string
        enum:
          - male
          - female
          - other
      studentID:
        type: string
      address:
        type: string
    xml:
      name: User
  Task:
    type: object
    properties:
      tid:
        type: number
      publisherId:
        type: number
      title:
        type: string
      description:
        type: string
      isQuestion:
        type: boolean
      isCompleted:
        type: boolean
      startTime:
        type: string
        format: date-time
      endTime:
        type: string
        format: date-time
      reward:
        type: number
      coinPool:
        type: number
      numOfPeople:
        type: number
      participant:
        type: array
        items:
          type: number
      finisher:
        type: array
        items:
          type: number
      question:
        type: array
        items:
          type: object
          properties:
            isRequired:
              type: boolean
            questionType:
              type: string
              enum:
                - fill
                - single
                - multiple
            questionTitle:
              type: string
            option:
              type: array
              items:
                type: string
    xml:
      name: Task
  AnswerList:
    type: object
    properties:
      tid:
        type: number
      answer:
        type: array
        items:
          $ref: "#/definitions/Answer"
  Answer:
    type: object
    properties:
      uid:
        type: string
      content:
        type: array
        items:
          type: string
  ApiResponse:
    type: object
    properties:
      message:
        type: string
  TaskInfoList:
    type: object
    properties:
      items:
        type: array
        items:
          type: object
          properties:
            tid:
              type: number
            title:
              type: string
            description:
              type: string
            isQuestion:
              type: boolean
            startTime:
              type: string
              format: date-time
            endTime:
              type: string
              format: date-time
            reward:
              type: number
            coinPool:
              type: number
            numOfPeople:
              type: number
      total_page:
        type: integer

externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
